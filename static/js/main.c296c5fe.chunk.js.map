{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","mock-data.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","props","state","showDetails","toggleDetails","bind","this","setState","event","className","summary","status","location","start","dateTime","timeZone","end","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","showSuggestions","undefined","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","style","display","NumberOfEvents","numberOfEvents","updateEventCount","eventCount","placeholder","mockData","extractLocations","Set","getEvents","a","App","currentLocation","mounted","then","locationEvents","slice","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c296c5fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDetails: false,\r\n    };\r\n    this.toggleDetails = this.toggleDetails.bind(this);\r\n  }\r\n  toggleDetails() {\r\n    this.setState({\r\n      showDetails: !this.state.showDetails,\r\n    });\r\n  }\r\n  render() {\r\n    let event = this.props.event;\r\n    return (\r\n      <div className=\"event event-container\">\r\n        <h2 className=\"event-title\">{event.summary}</h2>\r\n        <p>{event.status}</p>\r\n        <div className=\"basic-info\">\r\n          <p className=\"event-location\">{event.location}</p>\r\n          <p className=\"event-scheduled-start\">\r\n            From: {event.start.dateTime} ({event.start.timeZone})\r\n          </p>\r\n          {this.state.showDetails === true \r\n          && (\r\n             <h3 className=\"event-scheduled-end\">\r\n             From: {event.end.dateTime} ({event.end.timeZone})\r\n             </h3>) \r\n          && (\r\n            <p className=\"event-details\">{event.description}</p>\r\n          )}\r\n        </div>\r\n        <button className=\"details-btn\" onClick={this.toggleDetails}>\r\n          {!this.state.showDetails ? 'Show details' : 'Close'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;","import React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n      {events.map(event =>\r\n        <li key={event.id}>\r\n          <Event event={event} />\r\n        </li>\r\n      )}\r\n    </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: undefined\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n  \r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false\r\n    });\r\n    this.props.updateEvents(suggestion, 0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"city\"\r\n        value ={this.state.query}\r\n        onChange={this.handleInputChanged}\r\n        onFocus={() => { this.setState({showSuggestions: true}) }}\r\n      />\r\n      <ul className=\"suggestions\" style={this.state.showSuggestions ? {}: { display: 'none' }}>\r\n      {this.state.suggestions.map((suggestion) => (\r\n        <li \r\n        key={suggestion}\r\n        onClick={() => this.handleItemClicked(suggestion)}\r\n        >{suggestion}</li>\r\n      ))}\r\n        <li key=\"all\" onClick={() => this.handleItemClicked(\"all\")}>\r\n          <b>See all cities</b>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    numberOfEvents: 32 // default number of events displayed\r\n  };\r\n\r\n  updateEventCount = (eventCount) => {\r\n    const value = eventCount.target.value;\r\n    this.props.updateEvents(null, value);\r\n\r\n    if (value < 1 || value > 32) {\r\n      this.setState({\r\n        numberOfEvents: ''\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        numberOfEvents: value\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    const { numberOfEvents } = this.state;\r\n    return (\r\n      <div className=\"numberOfEvents\">\r\n        <p>Number of results:</p>\r\n        <input\r\n          className=\"event-count-input\"\r\n          type=\"number\"\r\n          placeholder=\"0\"\r\n          value={numberOfEvents}\r\n          onChange={this.updateEventCount}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;","const mockData = [\r\n  {\r\n    \"kind\": \"calendar#event\",\r\n    \"etag\": \"\\\"3181161784712000\\\"\",\r\n    \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\r\n    \"status\": \"confirmed\",\r\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n    \"created\": \"2020-05-19T19:17:46.000Z\",\r\n    \"updated\": \"2020-05-27T12:01:32.356Z\",\r\n    \"summary\": \"Learn JavaScript\",\r\n    \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\r\n    \"location\": \"London, UK\",\r\n    \"creator\": {\r\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n     \"self\": true\r\n    },\r\n    \"organizer\": {\r\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n     \"self\": true\r\n    },\r\n    \"start\": {\r\n     \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"end\": {\r\n     \"dateTime\": \"2020-05-19T17:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\r\n    \"originalStartTime\": {\r\n     \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\r\n    \"sequence\": 0,\r\n    \"reminders\": {\r\n     \"useDefault\": true\r\n    },\r\n    \"eventType\": \"default\"\r\n   },\r\n   {\r\n    \"kind\": \"calendar#event\",\r\n    \"etag\": \"\\\"3181159875584000\\\"\",\r\n    \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\r\n    \"status\": \"confirmed\",\r\n    \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n    \"created\": \"2020-05-19T19:14:30.000Z\",\r\n    \"updated\": \"2020-05-27T11:45:37.792Z\",\r\n    \"summary\": \"React is Fun\",\r\n    \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\r\n    \"location\": \"Berlin, Germany\",\r\n    \"creator\": {\r\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n     \"self\": true\r\n    },\r\n    \"organizer\": {\r\n     \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n     \"self\": true\r\n    },\r\n    \"start\": {\r\n     \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"end\": {\r\n     \"dateTime\": \"2020-05-20T15:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\r\n    \"originalStartTime\": {\r\n     \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n     \"timeZone\": \"Europe/Berlin\"\r\n    },\r\n    \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\r\n    \"sequence\": 0,\r\n    \"reminders\": {\r\n     \"useDefault\": true\r\n    },\r\n    \"eventType\": \"default\"\r\n   }\r\n]\r\n\r\nexport { mockData };","import { mockData } from './mock-data';\r\n\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nexport const getEvents = async () => {\r\n  return mockData;\r\n};","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from \"./EventList\";\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport { getEvents, extractLocations } from './api';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    locations: [],\r\n    currentLocation: 'all',\r\n    numberOfEvents: 32\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mounted = true;\r\n    getEvents().then((events) => {\r\n      if (this.mounted) {\r\n        this.setState({ \r\n          events: events.slice(0, this.state.numberOfEvents),\r\n          locations: extractLocations(events)\r\n         });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.mounted = false;\r\n  }\r\n  \r\n  updateEvents = (location, eventCount) => {\r\n    this.mounted = true;\r\n    getEvents().then((events) => {\r\n      const locationEvents = (location === 'all' && eventCount === 0) ?\r\n        events : location !== 'all' && eventCount === 0\r\n          ? events.filter((event) => event.location === location)\r\n          : events.slice(0, eventCount);\r\n      if (this.mounted) {\r\n        this.setState({\r\n          events: locationEvents,\r\n          numberOfEvents: eventCount,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\r\n        <NumberOfEvents numberOfEvents={this.state.numberOfEvents} updateEvents={this.updateEvents} />\r\n        <EventList events={this.state.events} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}